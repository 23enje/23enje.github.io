{"pages":[],"posts":[{"title":"Internet(백엔드 로드맵)","text":"백엔드 로드맵중 Internet 문서에 관련하여 How does the internet work? What is HTTP? Browsers and how they work? DNS and how it works? what is Domain Name? what is hosting?","link":"/2022/07/31/Backend-Roadmap/Backend-Roadmap-Internet/"},{"title":"백엔드 로드맵(Backend Roadmap)","text":"백엔드 로드맵","link":"/2022/07/16/Backend-Roadmap/Backend-Roadmap/"},{"title":"How does the internet work?","text":"인터넷은 어떻게 동작할까요? 웹 기반 응용 프로그램의 폭발적인 성장 이후 모든 개발자는 인터넷 작동 방식을 이해함으로써 득을 봤습니다. 이 글은 다음 질문들에 답하기 위해 작성하였습니다. 인터넷은 무엇인가요?인터넷은 표준화된 프로토콜들을 통해 상호 간에 컴퓨터가 통신하는 글로벌 네트워크입니다. 인터넷의 시초라 불리는 ARPANET은 미국의 국방부 연구 프로젝트입니다. ARPANET은 Paul Baran이 제시한 핵공격에도 실제 생존할 수 있는 통합 시스템으로서 메시지를 블록으로 쪼개어 그물망을 통해 가능한 한 빨리 모든 방향으로 전달하는 아이디어를 채용합니다. Vint Cerf, Bob Kahn은 ARPANET을 발전시켜 인터넷을 최초로 설계하였습니다. 인터넷은 독립적으로 운영되는 네트워크이며 완전히 분산되어 패킷 라우팅 방법 또는 네트워크의 일부를 구축할 장소, 심지어 누가 누구와 상호작용하는지 결정하는 중앙 통제가 없습니다. 인터넷은 네트워크의 각 부분이 끝부터 끝까지 모두 확실하게 연결되어 있으면 어느 곳에 누구와도 어떠한 기기이든 통신이 가능합니다. 인터넷은 정보를 어떻게 교환할까요?인터넷상의 정보는 이더넷 케이블, 광섬유 케이블 및 무선 신호를 포함한 다양한 매체를 통해 비트 형태로 한 컴퓨터에서 다른 컴퓨터로 이동합니다. 인터넷은 전자우편과 비슷하지만 상자나 봉투 대신에 바이너리 정보를 전송합니다. 정보는 비트로 이루어져 있습니다. 대역폭이란 장치의 최대 전송량입니다. 대역폭은 비트 전송률로 측정됩니다. 비트 전송률은 보통 1초의 시간 동안 보낼 수 있는 비트의 수를 말합니다. 네트워크는 서로 어떻게 통신하고 관련된 프로토콜은 어떻게 통신할까요?인터넷 상의 여러 기기는 모두 각자의 고유 주소를 갖습니다. 인터넷 상의 컴퓨터 주소체계는 인터넷 프로토콜 또는 IP라 부릅니다. 컴퓨터 주소는 IP 주소라 부릅니다. IP 주소는 여러 개의 숫자가 위계체계로 구성되어 있습니다. 모든 디지털 데이터와 마찬가지로, 이러한 숫자 각각은 비트로 나타냅니다. 전통적인 IP 주소는 32비트 길이이고 주소의 각 부분은 8비트로 되어 있습니다. 앞쪽의 숫자들은 일반적으로 기기의 국가와 지역 네트워크를 나타내며 그 다음 서브 네트워크가 나오고 마지막으로는 특정 기기의 주소가 나옵니다. 이 버전의 IP 주소는 IPv4라고 부르며 40억개의 고유 주소가 초과됨에 따라 IPv6 주소 형식으로 전환중입니다. 도메인 이름 체계 또는 DNS라 부르는 시스템은 DNS를 사용하여 도메인 이름을 찾고 인터넷의 목적지로 연결하는데 사용한 관련 IP 주소를 얻습니다. 패킷, 라우터 및 안정성 간의 관계는 어떨까요?한 컴퓨터에서 다른 컴퓨터로 인터넷상의 정보 전송은 고정 경로를 따를 필요가 없습니다. 실제로 전송중에 경로가 변경 될 수 있습니다. 이 정보 전송은 패킷의 형태로 이루어지며 이러한 패킷은 특정 요소에 따라 다른 경로를 따를 수 있습니다. 매우 큰 이미지를 친구에게 전송하고 싶거나 웹 사이트에 업로드하고 싶으면, 그 이미지는 수 백 만 비트의 1과 0으로 구성되어 한 패킷 안에서 함께 보내기에는 너무 많습니다. 데이터가 컴퓨터 안에 있기 때문에 이미지를 보내는 컴퓨터는 빠르게 패킷이라 부르는 수 백개 또는 심지어 수 천개의 더 작은 부분으로 쪼갤 수 있습니다. 라우터라고 부르는 인터넷 상의 특수 컴퓨터는 트래픽 관리자와 같은 역할을 하여 패킷을 순조롭게 네트워크를 통해 이동하게 합니다. 한 경로가 막히면, 개별 패킷은 인터넷을 통해 다른 경로로 이동하여 진행됩니다. 인터넷 프로토콜의 일부로서 각 라우터는 패킷을 보내는 여러 개 경로의 트랙을 따르고, 패킷의 목적지 주소에 기초하여 각 데이터 조각별로 이용 가능한 가장 효율적인 경로를 선택합니다. 이 경우 가장 효율적이라는 건 비용을 의미하는 것이 아니라, 시간과, 회사 간의 방침 및 관계 등과 같은 비기술적인 요소를 의미합니다. 패킷이 움직이는 경로는 여러 경로의 옵션이 있으면 네트워크의 결점이 없어집니다. 이것은 네트워크가 계속해서 패킷을 보낼 수 있다는 의미입니다. 이것은 인터넷의 주요 원칙을 위한 기초로 즉, 신뢰성입니다. TCP(전송제어 프로토콜)는 패킷으로 전송 및 수신되는 모든 데이터를 관리합니다. TCP와 라우터 시스템의 장점은 확장성입니다. 이러한 무결점과 리던던시 원칙때문에, 더 많은 라우터를 추가할 수록 서비스를 중단하지 않고 지속할 수 있습니다. 브라우저안에 웹페이지를 어떻게 볼 수 있을까요?HTTP는 웹페이지가 인터넷을 통해 전송되는 표준 프로토콜입니다. 안전한 체널은 전송계층보안(TLS)의 후신인 보안소켓계층(SSL)을 사용합니다. HTTPS 프로토콜은 HTTP 요청이 안전하고 보호되고 있음을 보장합니다. 웹사이트가 브라우저에게 안전한 연결상태에서 작업하라고 요청할 때, SSL은 먼저 디지털 인증을 제공합니다. 디지털 인증은 인증기관에서 발행합니다. 인증기관은 웹사이트의 신원을 검증하고 인증서를 발급하는 공신력 있는 기관입니다. HTTP 및 DNS는 HTML 또는 미디어 파일, 웹 상의 모든 것의 전송 및 수신을 관리합니다. 이것을 가능하게 만드는 것은 정보를 작은 패킷으로 쪼개 운송하는 TCP/IP와 라우터 네트워크입니다. 패킷 자체는 이진법, 1과 0의 시퀸스로 구성되어 물리적으로 전기선 및 광섬유 케이블, 무선망을 통해 전송됩니다. 인터넷에서의 정보 전송은 안전할까요?암호화는 인터넷에서 우리의 통신을 안전하게 유지하는 것입니다. 인터넷은 공개되어 있고 공용 시스템입니다. 하지만 예를 들어 신용카드번호, 암호, 이메일같은 비공개로 교환하는 데이터도 많습니다. 모든 종류의 데이터는 암호화, 스크램블링 또는 원래의 텍스트를 숨기는 메시지 변경 등의 프로세스를 통해 비밀이 유지됩니다. 여기서 해독(Decryption)은 메시지를 읽을 수 있도록 언스크램블링하는 프로세스입니다. 오늘날 보안통신은 256비트 키를 사용합니다. 보내는 사람과 받는 사람이 동일한 키를 공유하여 메시지를 변환하고 해석하는 것을 대칭 암호화라고 합니다. 공개 키는 데이터를 암호화하는 데 사용되고 누구라도 이것으로 비밀 메시지를 만들 수 있습니다. 하지만, 비밀은 비공개 키로 엑세스할 수 있는 컴퓨터로만 암호화 할 수 있습니다. 이런 식으로 비공개 키에 대한 합의 없이도 비밀 메시지를 교환할 수 있습니다. 공개 키 암호 방식은 공개된 인터넷에서 사용하는 보안 메시징의 기초입니다. SSL 및 TLS로 알려진 보안 프로토콜을 포함하여 이 방식으로 웹을 탐색하는 사용자를 보호합니다. 사이버 보안이란 무엇이며 인터넷 범죄는 무엇일까요?컴퓨터 바이러스를 이용하여, 해커들은 전세계에 걸쳐 수백만 대의 컴퓨터를 점령하고, 그것들을 봇넷으로 알려진 디지털 군대로 사용하여 웹사이트를 공격하고 무너뜨릴 수 있습니다. 이러한 종류의 공격을 분산 서비스 거부(DDOS)라 합니다. 대부분의 웹 사이트는 하루에 수백만 건의 요청에 응답 할 준비가 되어 있지만, 수십억 또는 수 조 건의 공격을 받으면 과부화되어 응답하지 않습니다. 대량의 스팸 메일을 여러사람에게 보내 신뢰할 수 있는 이메일처럼 가장하여 이메일의 링크를 클릭하게 하는 것을 피싱(Phishing)사기라 합니다. 피싱사기는 정보유출의 가능성이 있습니다.","link":"/2022/07/31/Backend-Roadmap/how-does-the-internet-work/"},{"title":"What is HTTP?","text":"HTTP는 무엇일까요? HTTP는 무엇인가요?The Hypertext Transfer Protocol(HTTP)는 월드 와이드 웹의 기반이며 하이퍼텍스트 링크를 사용하여 웹 페이지를 로드하는 데 사용됩니다. HTTP는 네트워크로 연결된 장치 간에 정보를 전송하도록 설계된 애플리케이션 계층 프로토콜이며 네트워크 포로토콜 스택의 다른 계층 위에서 실행됩니다. HTTP를 통한 일반적인 흐름은 클라이언트 시스템이 서버에 요청을 한 다음 응답 메시지를 보내는 것과 관련이 있습니다. HTTP 요청에는 무엇이 있을까요?HTTP 요청은 웹 브라우저와 같은 인터넷 커뮤니케이션 플랫폼이 웹사이트를 로드하는데 필요한 정보를 요청하는 방식입니다. 인터넷을 통해 이루어진 각 HTTP 요청은 다른 유형의 정보를 전달하는 일련의 인코딩 된 데이터를 전달합니다. 일반적인 HTTP 요청은 다음이 포함됩니다. HTTP version type a URL an HTTP method HTTP request headers Optional HTTP body HTTP 메서드는 무엇이 있을까요?HTTP 동사라고도 하는 HTTP 메서드는 HTTP 요청이 쿼리된 서버에서 기대하는 작업을 나타냅니다. 예를 들어, 가장 일반적인 HTTP 방법 중 두 가지는 ‘GET’과 ‘POST’입니다. ‘GET’ 요청은 그 대가로(일반적으로 웹 사이트 형태) 정보를 다시 기대하는 반면, ‘POST’ 요청은 일반적으로 클라이언트가 웹 서버에 정보(예: 양식 정보, 예: 제출 된 사용자 이름 및 암호)를 제출하고 있음을 나타냅니다. HTTP 요청 헤더는 무엇인가요?HTTP 헤더는 키-값 쌍에 저장된 텍스트 정보가 포함되어 있으며 모든 HTTP 요청(및 응답)을 포함합니다. 이러한 헤더는 클라이언트가 어떤 데이터를 요청하고 있는지 사용하는 브라우저와 같은 핵심 정보를 전달합니다. Google 크롬의 네트워크 탭에서 HTTP 요청 헤더의 예: HTTP 요청 본문에는 무엇이 있을까요?요청의 본문은 요청이 전송하는 정보의 ‘본문’을 포함하는 부분입니다. HTTP 요청의 본문에는 웹 서버에 제출되는 모든 정보(예: 사용자 이름 및 암호 또는 양식에 입력된 기타 데이터)가 포함됩니다. HTTP 응답에는 무엇이 있을까요?HTTP 응답은 웹 클라이언트(종종 브라우저)가 HTTP 요청에 대한 응답으로 인터넷 서버로부터 수신하는 응답입니다. 이러한 응답은 HTTP 요청에서 요청된 내용을 기반으로 중요한 정보를 전달합니다. 일반적인 HTTP 응답에는 다음이 포함됩니다. an HTTP status code HTTP response headers Optional HTTP body HTTP 상태 코드는 무엇인가요?HTTP 상태 코드는 HTTP 요청이 성공적으로 완료되었는지 여부를 나타내는 데 가장 자주 사용되는 3자리 코드입니다. 상태 코드는 다음 5개의 블록으로 나뉩니다. 1xx Informational 2xx Success 3xx Redirection 4xx Client Error 5xx Server Error “XX”는 00과 99사이의 다른 숫자를 나타냅니다. 숫자 ‘2로’ 시작하는 상태 코드는 성공을 나타냅니다. 예를 들어 클라이언트가 웹 페이지에 요청한 후 가장 일반적으로 표시되는 응답의 상태 코드는 ‘200 OK’로, 요청이 제대로 완료되었음을 나타냅니다. 응답이 ‘4’ 또는 ‘5’로 시작되면 오류가 발생하여 웹 페이지가 표시되지 않음을 의미합니다. ‘4’로 시작하는 상태 코드는 클라이언트 측 오류를 나타냅니다(URL에서 오타를 만들 떄 ‘404 NOT FOUND’ 상태 코드가 발생하는 것은 매우 일반적입니다). ‘5’로 시작하는 상태 코드는 서버 측에서 문제가 발생했음을 의미합니다. 상태 코드는 각각 정보 응답과 리디렉션을 나타내는 ‘1’또는 ‘3’으로 시작할 수도 있습니다. HTTP 응답 헤더란 무엇인가요?HTTP 요청과 마찬가지로 HTTP 응답에는 응답 본문에서 전송되는 데이터의 언어 및 형식과 같은 중요한 정보를 전달하는 헤더가 함께 제공됩니다. Google 크롬의 네트워크 탭에서 HTTP 응답 헤더의 예: 응답 본문에는 무엇이 있을까요?‘GET’ 요청에 대한 성공적인 HTTP 응답은 일반적으로 요청된 정보를 포함하는 본문을 갖습니다. 대부분의 웹 요청에서 이것은 웹 브라우저가 웹 페이지로 변환하는 HTML 데이터입니다. HTTP를 통해 DDoS 공격을 할 수 있나요?HTTP는 “상태 비저장” 프로토콜이며, 이는 각 명령이 다른 명령과 독립적으로 실행됨을 의미합니다. 원래 사양에서 HTTP는 각각 TCP 연결을 만들고 닫은 요청을 요청합니다. 최신 버전의 HTTP 프로토콜(HTTP 1.1 이상)에서는 영구 연결을 통해 여러 HTTP 요청이 영구 TCP 연결을 통과할 수 있으므로 리소스 소비가 향상됩니다. DoS 또는 DDoS 공격의 맥락에서 대량의 HTTP 요청을 사용하여 대상 장치에 공격을 탑재할 수 있으며 애플리케이션 계층 공격 또는 계층 7 공격의 일부로 간주됩니다.","link":"/2022/07/31/Backend-Roadmap/what-is-HTTP/"},{"title":"스프링 프레임워크(Spring Framework)","text":"스프링 프레임워크(영어: Spring Framework)는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크로서 간단히 스프링(Spring)이라고도 한다. 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공하고 있다. Spring1. 제어의 역전(Inversion of Control, IoC), 의존성 주입(Dependency Injection, DI)Spring 컨테이너는 IoC 컨테이너 또는 DI 컨테이너를 의미합니다. 스프링 규약에 의해 이런 Spring 컨테이너가 관리하는 객체를 보통 빈(Bean)이라고 부릅니다.IoC는 DI로 알려져 있습니다. IoC란 객체가 자신 및 같이 작동하는 다른 객체의 의존성을 생성자 인자, 팩토리 메소드의 인자, 객체 인스턴스가 생성되거나 팩토리 메소드로부터 반환될 때 설정되는 프로퍼티를 통해서 정의하는 프로세스입니다. 그러면서 IoC 컨테이너는 Bean이 생성될 때 이러한 의존성을 주입합니다. 이 프로세스는 직접적으로 클래스들의 인자를 사용하거나 Service Locator Pattern과 같은 방법을 사용함으로서 의존성을 인스턴스화 하거나 위치를 제어하는 Bean의 입장에서 근본적으로 제어의 역전(IoC)이라 합니다. 제어의 역전(IoC)을 코드를 통해 알아봅시다.객체의 의존성을 관리하기 위한 두가지 방법이 있습니다. 하나는 객체가 직접 의존 관계에 있는 객체들의 생성자를 호출하는 것으로 의존성을 인스턴스화하는 것입니다. 다음의 RegistrationService는 회원 가입에 성공한 이후에 사용자에게 이메일을 전송하는 예제입니다. 12345678public class RegistrationService { private MailSender mailSender; public RegistrationService() { // 의존하는 객체를 인스턴스화합니다. this.mailSender = new MailSender; } // ... 나머지 로직} 보다시피 RegistrationService는 MailSender를 인스턴스화함으로써 의존성을 관리합니다. 다른 방법은 생성자 또는 세터를 통해 의존성을 주입하기 위해 스프링과 같은 컨테이너에 의존하여 제어의 역전이 발생된채 관리되는 것입니다. 다음 RegistrationService는 기존 코드에서 제어의 역전을 보여주기 위해 변경한 예제입니다. 1234567public class RegistrationService { private MailSender mailSender; public RegistrationService(MailSender mailSender) { this.mailSender = mailSender; } // ... 나머지 로직} 보다시피 RegistrationService 생성자의 인자로 MailSender 인스턴스를 추가합니다. 이 방법에서 RegistrationService는 의존성을 제어하지 못했습니다. 여기서 스프링이 MailSender 인스턴스를 인스턴스화하는 책임을 집니다. 의존성의 제어가 역전되었습니다. 이것을 제어의 역전(IoC)이라 부릅니다. 2. 스프링 IoC 컨테이너(Spring IoC Container)스프링에서 org.springframework.context.ApplicationContext 인터페이스는 스프링 IoC 컨테이너를 의미합니다. 여기서 스프링은 클래스에 어떤 의존성이 필요한지 어떻게 알 수 있을까요? 스프링 컨테이너는 개발자가 정의한 설정 메타데이터(Configuration Metadata)를 사용하여 스프링 컨테이너의 객체를 인스턴스화하거나 구성 및 어셈블 하도록 지시합니다. 스프링 컨테이너를 설정하기 위한 방법은 ClassPathXmlApplicationContext를 사용하여 XML 기반 구성으로 설정하여 사용하였으나 스프링 3.0 이후부터는 대다수의 개발자들이 AnnotationConfigApplicationContext를 사용하여 자바 기반 구성을 설정하고 있습니다. ClassPathXmlApplicationContext 및 AnnotationConfigApplicationContext는 ApplicationContext 인터페이스의 구현체입니다. 3. 어노테이션 기반의 설정스프링은 의존성으로 관리할 수 있는 어노테이션 기반의 설정을 제공합니다. 이를 위해 스프링은 크게 두 가지 유형의 어노테이션을 제공합니다. 하나는 빈을 선언하는 어노테이션이고 다른 하나는 의존성을 연결하는 어노테이션입니다. 3.1. 빈 선언스프링은 빈 선언을 위해 @Component, @Service, @Controller, @Repository를 포함한 스테레오 타입 어노테이션을 제공합니다. 스프링은 @ComponentScan 어노테이션에 입력한 기본 패키지부터 스캔해 해당 어노테이션이 달린 클래스를 수집합니다.@ComponentScan 어노테이션은 제네릭 스트레오 타입입니다. 클래스에 이 어노테이션이 적용돼 있으면 스프링은 해당 클래스를 인스턴스화합니다. @service 어노테이션은 @Component를 특수화한 것이며 이 어노테이션이 적용된 클래스는 도메인 주도 설계(이하 “DDD”라 합니다.)에 사용된 용어인 서비스(Service)이거나 Core J2EE에서의 패턴인 비즈니스 서비스 Facade를 나타냅니다. @Repository 어노테이션은 컴포넌트가 DDD에서 사용된 용어인 리파지토리(Repository) 또는 Java EE 패턴인 DAO임을 나타냅니다. @Controller 어노테이션은 컴포넌트가 HTTP 요청을 받을 수 있는 웹 컨트롤러임을 나타냅니다. 3.2. 의존성 주입(Dependency Injection)의존성을 연결하는 데는 스프링에서 제공하는 두 어노테이션인 @Required 어노테이션과 @Autowired 어노테이션을 사용할 수 있습니다. @Required 어노테이션을 세터 메소드에, @Autowired 어노테이션을 생성자와 메소드, 필드에 적용할 수 있습니다. 3.2.1. 생성자 기반의 주입@Autowired 어노테이션을 이용하여 생성자 기반 의존성을 주입한 예시 입니다. 12345678910@Component // 해당 클래스에 빈 선언public class MessageService { private MessageRepository repository; @Autowired // 생성자 기반의 주입(생략 가능) public MessageService (MessageRepository repository) { this.repository = repository; } ...} MessageRepository 빈은 MessageService 빈에 생성자를 통해 주입됩니다. Autowired는 생략이 가능합니다. 생략할 경우 스프링은 MessageRepository 빈을 삽입 해야 하므로 MessageService 생성자를 검사하면서 해당 인자의 유형을 찾습니다. 3.2.2. 세터 기반/메소드 기반의 주입일반적으로 세터 메소드를 선언하고 @Autowired 어노테이션 또는 @Required 어노테이션을 적용하는 것입니다.다음은 @Required 어노테이션을 사용한 예시 입니다. 12345678public class MessageService {... @Required public void setRepository(MessageRepository repository) { this.repository = repository; } ...} 또는 @Autowired 어노테이션을 사용할 수 있습니다. 12345678public class MessageService {... @Autowired public void prepare(MessageRepository repository) { this.repository = repository; } ...} 3.2.3. 필드 기반의 주입@autowired 어노테이션으로 필드에 직접 적용할 수 있습니다. 이 경우 세터 메소드에 따로 선언할 필요가 없습니다. 123456789public class MessageService { @Autowired private MessageRepository repository; public MessageService (MessageRepository repository) { this.repository = repository; } ...} 3.3. 의존성 주입 모범 사례의존성은 항상 생성자를 통해 주입해야 합니다. 이를 통해 생성 이후에 인스턴스는 완전히 초기화되고 주입된 의존성은 읽기 전용이 됩니다. 필드 기반 주입은 사용하지 않아야 합니다. 스프링은 자바 리플렉션(Reflection)으로 필드를 주입하고 필드 주입 방식을 사용하는 것은 위험한 것으로 간주합니다. 또한 의존성을 초기화하고 관리하는 방법과 이들의 의존 관계와 같은 의존성의 정보를 숨기며 필드 주입은 매우 간단하지만 너무 많은 의존성을 필드 주입으로 추가하면 단일 책임 원칙(SRP)을 위반할 수 있습니다. 4. 스프링 MVC스프링 MVC는 웹 애플리케이션을 구현하는 기술을 제공합니다. 이것은 자바 EE 서블릿 API를 기반으로합니다. 4.1 Java EE(Enterprise Edition)Spring은 Java EE 애플리케이션을 만들기 위한 프레임워크입니다.Java EE란 Java SE에 웹 기능을 추가한 플랫폼입니다. 이전에는 J2EE라 불렸으나 버전 5.0 이후 Java EE로 개칭되었습니다.이러한 Java EE 기술 사양을 준수해서 만든 서버를 WAS(Web Application Server)라 합니다. 4.2 자바 EE 서블릿(Servlet)서블릿이란 CGI(Common Gateway Interface)의 일종입니다. CGI란 프로그래밍 언어가 웹 서버에서 동적인 페이지를 보여주기 위한 기술 중 하나입니다. Servlet의 경우 자바와 CGI가 합쳐진 기술입니다. 자바 EE 서블릿(이하 “서블릿”이라 합니다.)은 톰캣과 같은 애플리케이션 서버인 서블릿 컨테이너 내에서 동작합니다. HTTP 요청이 서버에 도착하면 일반적으로 인증, 로깅, 감사와 같은 필터링 작업을 수행하는 필터 리스트를 통과합니다. 요청이 모든 필터를 통과하면 애플리케이션 서버는 특정 패턴과 일치하는 URI를 포함하는 요청을 처리할 수 있게 등록된 서블릿으로 요청을 넘겨줍니다. 서블릿이 요청에 대한 처리를 마치면 HTTP 응답은 해당 HTTP 요청을 처리한 같은 필터 세트를 통과한 후 클라이어트로 다시 전송됩니다. 자바 EE에서 모든 HTTP 요청에 대해 HttpServletRequest 인스턴스가 생성됩니다. 그리고 모든 HTTP 응답에 대해 HttpServletResponse 인스턴스가 생성됩니다. 여러 요청에서 사용자를 식별하기 위해 애플리케이션 서버는 첫 번째 요청을 받으면 HttpSession 인스턴스를 생성합니다. 각 HttpSession 인스턴스는 세션(Session) ID라고 부르는 ID를 가집니다. 세션 ID는 HTTP 응답 헤더의 클라이언트에 쿠키로 전송됩니다. 클라이언트는 그 쿠키를 저장하고 다음 요청 시 다시 서버로 보냅니다. 이렇게 해서 서버는 쿠키에서 찾은 세션 ID로 HttpSession 인스턴스를 조회해 사용자를 인식할 수 있습니다. 자바 EE에서 HttpSessionListener 인터페이스를 구현해 HttpSession의 라이프 사이클 이벤트를 수신하거나 ServletRequestListener 인터페이스를 구현해 요청에 대한 라이프 사이클 이벤트를 수신하는 리스너를 만들 수 있습니다. 서블릿은 생성하기 위해 javax.servlet.http.HttpServlet을 확장하고 @WebServlet 어노테이션을 적용하거나 전통 방식으로 자바 EE 웹 애플리케이션의 설정 파일인 web.xml 파일에 등록할 수 있습니다. 어느 방법이든, 서버가 일치하는 URI 요청을 라우트할 수 있게 서블릿을 하나 이상의 URI 패턴에 매핑해야합니다. 또한 서블릿에서 doGet, doPost, doPut, doDelete 메소드를 재정의할 수 있습니다. 이러한 메소드의 내부는 애플리케이션의 로직이 시작되는 위치가 됩니다. 또한 서블릿을 사용할 때 in-memory 데이터 또는 I/O 수행과 같은 같은 공유 리소스에 접근해야 한다면 서블릿이 항상 동시 요청을 다루고, 하나의 요청에 의한 변경 사항이 다른 요청에 영향을 줄 수 있다는 사실을 기억해야 합니다. 4.3 DispatcherServlet스프링 MVC에서는 클래스를 생성해 @Controller 어노테이션을 추가하고 @RequestMapping 어노테이션으로 특정 URI 패턴에 매핑하여 서블릿을 대신할 수 있습니다. 규약에 따르면 클래스 이름은 보통 Controller로 끝납니다. 스프링은 요청을 받기 위해 DispatcherServlet을 활용합니다. DispatcherServlet은 모든 요청을 처리할 수 있게 설정해야 하며 @RequestMapping 어노테이션에 지정된 URI 패턴에 따라 스프링 요청을 처리할 패턴에 맞는 컨트롤러를 찾아갑니다. 4.4 뷰(Views)일반적으로 웹 애플리케이션에서 웹 페이지를 렌더링할 때 브라우저에 HTML 코드를 보내거나 API 호출의 결과로 JSON 데이터를 보냅니다. HTML 코드와 JSON 데이터는 모두 HTTP 응답으로 전달되는 String 객체입니다. 4.5 MVC 패턴C는 컨트롤러(Controller), V는 HTML 마크업이 위치하는 뷰(View)입니다. M은 컨트롤러가 생성하고 HTTP 응답을 통해 클라이언트에 전송되어 뷰가 최종 결과를 렌더링하는데 사용할 수 있는 데이터를 포함하는 모델(Model)입니다. 5. 필터(Filter)다음 예제 필터는 디자인 패턴인 책임 연쇄 패턴(Chain of Responsibility)을 구현한 것입니다. 서블릿에 도달하기 전에 HTTP 요청에 대한 필터링 작업을 수행하려고 할 때 유용합니다. 감사(audit) 요청에 대한 AudtingFilter를 만들려면 javax.servlet.Filter 인터페이스를 구현해야 합니다. 또는 스프링의 org.springframework.web.filter.GenericFilterBean을 확장해서 필터를 만들 수도 있습니다. 12345678910public class AuditingFilter extends GenericFilterBean { @Override public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { long start = new Date().getTime(); chain.doFilter(req, res); long elapsed = new Date().getTime() - start; HttpServletRequest request = (HttpServletRequest) req; logger.debug(\"Request[uri=\" + request.getRequestURI() + \", method=\"+ request.getMethod() + \"] completed in \" + elapsed + \" ms\"); }} 보다시피 AuditingFilter는 GenericFilterBean을 확장하고 필터링 작업을 수행하는 doFilter() 메소드를 재정의합니다. doFilter()는 체인에 실행할 필터가 존재하면 추가 필터를 호출할 수 있게 합니다. 6. 스프링 JDBC(Java Database Connectivity), JPA(Java Persistence API)JDBC(Java Database Connectivity) API는 관계형 데이터베이스에 저장된 데이터에 접근하는 방법을 정의합니다. JDBC 드라이버는 특정 데이터베이스에 대한 JDBC API의 구현체입니다. JPA(Java Persistence API)는 자바 객체의 영속성을 위한 자바의 표준화된 접근 방식을 정의합니다. 이 방식은 객체 지향 모델과 관계형 데이터베이스에 저장된 데이터 사이의 간격을 메우기 위해 객체 관계형 매핑(ORM, Object-Relational Mapping) 메커니즘을 사용합니다. 하이버네이트(Hibernate) ORM은 가장 흔히 사용하는 JPA 표준을 구현한 구현체입니다. JDBC API는 데이터베이스와의 상호작용을 해결하지만, JPA는 객체 지향 방식으로 데이터베이스에 객체를 저장하고 가져오는 방법을 담당합니다.","link":"/2022/04/25/Spring/Spring/"},{"title":"Browsers and how they work?","text":"브라우저는 어떻게 작동할까요? 소개브라우저는 아마도 가장 많이 사용하는 소프트웨어일 것입니다. 이 글을 통해 브라우저가 어떻게 동작하는지 설명하려고 합니다. 이 글을 읽고 나면, 브라우저 창에 naver.com을 입력했을 때 어떤 과정을 거쳐 페이지가 화면에 보이게 되는지 알게 될 것입니다. 이 글에서 설명하는 브라우저최근에는 인터넷 익스플로러, 파이어폭스, 사파리, 크롬, 오페라 이렇게 다섯 개의 브라우저를 많이 사용하지만 이 글은 파이어폭스, 크롬 사파리와 같은 오픈소스 브라우저를 예로 들 것입니다. 사파리는 부분적으로 오픈소스입니다. StatCounter 브라우저 통계에 의하면 2012년 3월 현재 파이어폭스, 사파리, 크롬의 점유율은 62.57%에 달합니다. 오픈소스 브라우저가 시장의 상당 부분을 차지하게 된 것입니다. 브라우저의 주요 기능브라우저의 주요 기능은 사용자가 선택한 자원을 서버에 요청하고 브라우저에 표시하는 것입니다. 자원은 보통 HTML 문서지만 PDF나 이미지 또는 다른 형태일 수 있습니다. 자원의 주소는 URI(Uniform Resource Identifier)에 의해 정해집니다. 브라우저는 HTML과 CSS 명세에 따라 HTML 파일을 해석해서 표시하는데 이 명세는 웹 표준화 기구인 W3C(World Wide Web Consortium)에서 정합니다. 과거에는 브라우저들이 일부만 이 명세에 따라 구현하고 독자적인 방법으로 확장함으로써 웹 제작자가 심각한 호환성 문제를 겪었지만 최근에는 대부분의 브라우저가 표준 명세를 따릅니다. 브라우저의 사용자 인터페이스는 서로 닮아 있는데 다음과 같은 요소들이 일반적입니다. URI를 입력할 수 있는 주소표시줄 이전 버튼과 다음 버튼 북마크 새로 고침 버튼과 현재 문서의 로드를 중단할 수 있는 정지 버튼 홈 버튼 브라우저의 사용자 인터페이스는 표준 명세가 없음에도 불구하고 수 년간 서로의 장점을 모방하면서 현재에 이르게 되었다. HTML5 명세는 주소 표시줄, 상태 표시줄, 도구 모음과 같은 일반적인 요소를 제외하고 브라우저의 필수 UI를 정의하지 않았다. 물론 파이어폭스의 다운로드 관리자와 같이 브라우저에 특화된 기능도 있다. 브라우저의 기본 구조브라우저의 주요 구성 요소는 다음과 같습니다. 사용자 인터페이스 - 주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등. 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분입니다. 브라우저 엔진 - 사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어합니다. 렌더링 엔진 - 요청한 콘텐츠를 표시합니다. 예를 들어 HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 표시합니다. 통신 - HTTP 요청과 같은 네트워크 호출에 사용됩니다. 이것은 플랫폼 독립적인 인터페이스이고 각 플랫폼 하부에서 실행됩니다. UI 백엔드 - 콤보 박스와 창 같은 기본적인 장치를 그립니다. 플랫폼에서 명시하지 않은 일반적인 인터페이스로서, OS 사용자 인터페이스 체계를 사용합니다. 자바스크립트 해석기 - 자바스크립트 코드를 해석하고 실행합니다. 자료 저장소 - 이 부분은 자료를 저장하는 계층입니다. 쿠키를 저장하는 것과 같이 모든 종류의 자원을 하드 디스크에 저장할 필요가 있습니다.HTML5 명세에는 브라우저가 지원하는 localStorage, IndexedDB, WebSQL and FileSystem과 같은 ‘웹 데이터 베이스’가 정의되어 있습니다. 크롬은 대부분의 브라우저와 달리 각 탭마다 별도의 렌더링 엔진 인스턴스를 유지하는 것이 주목할만합니다. 각 탭은 독립된 프로세스로 처리됩니다. 렌더링 엔진렌더링 엔진의 역할은 요청 받은 내용을 브라우저 화면에 표시하는 일입니다. 렌더링 엔진은 HTML 및 XML 문서와 이미지를 표시할 수 있습니다. 물론 플러그인이나 브라우저 확장 기능을 이용해 PDF와 같은 다른 유형도 표시할 수 있습니다. 그러나 이 글에서는 HTML과 이미지를 CSS로 표시하는 주된 사용 패턴에 초점을 맞출 것 입니다. 렌더링 엔진들이 글에서 다루는 브라우저인 파이어폭스와 크롬, 사파리는 두 종류의 렌더링 엔진으로 제작되었습니다. 파이어폭스는 모질라에서 직접 만든 게코(Gecko)엔진을 사용하고 사파리와 크롬은 웹킷(Webkit)엔진을 사용합니다. 웹킷은 최초 리눅스 플랫폼에서 동작하기 위해 제작된 오픈소스 엔진인데 애플이 맥과 윈도우즈에서 사파리 브라우저를 지원하기 위해 수정을 가했습니다. 동작 과정렌더링 엔진은 통신으로부터 요청한 문서의 내용을 얻는 것으로 시작하는데 문서의 내용은 보통 8KB 단위로 전송됩니다. 다음은 렌더링 엔진의 기본적인 동작 과정입니다. 렌더링 엔진은 HTML 문서를 파싱하고 “콘텐츠 트리” 내부에서 태그를 DOM 노드로 변환합니다. 그 다음 외부 CSS 파일과 함께 포함된 스타일 요소도 파싱합니다. 스타일 정보와 HTML 표시 규칙은 “렌더 트리”라고 부르는 또 다른 트리를 생성합니다. 렌더 트리는 색상 또는 면적과 같은 시각적 속성이 있는 사각형을 포함하고 있는데 정해진 순서대로 화면에 표시됩니다. 렌더 트리 생성이 끝나면 배치가 시작되는데 이것은 각 노드가 화면의 정확한 위치에 표시되는 것을 의미합니다. 다음은 UI 백엔드에서 렌더 트리의 각 노드를 가로지르며 형상을 만들어 내는 그리기 과정입니다. 일련의 과정들이 점진적으로 진행된다는 것을 아는 것이 중요합니다. 렌더링 엔진은 좀 더 나은 사용자 경험을 위해 가능하면 빠르게 내용을 표시하는데 모든 HTML을 파싱할 떄까지 기다리지 않고 배치와 그리기 과정을 시작합니다. 네트워크로부터 나머지 내용이 전송되기를 기다리는 동시에 받은 내용의 일부를 먼저 화면에 표시하는 것입니다. 동작 과정 예 웹킷과 게코가 용어를 약간 다르게 사용하고 있지만 동작 과정은 기본적으로 동일하다는 것을 알 수 있습니다. 게코는 시각적으로 처리되는 렌더 트리를 “형상 트리(frame tree)”라고 부르고 각 요소를 형상(frame)이라고 하는데 웹킷은 “렌더 객체(render object)”로 구성되어 있는 “렌더 트리(render tree)”라는 용어를 사용합니다. 웹킷은 요소를 배치하는데 “배치(layout)”라는 용어를 사용하지만 게코는 “리플로(reflow)”라고 부릅니다. “어태치먼트(attachment)”는 웹킷이 렌더 트리를 생성하기 위해 DOM 노드와 시각 정보를 연결하는 과정입니다. 게코는 HTML과 DOM 트리 사이에 “콘텐츠 싱크(content sink)”라고 부르는 과정을 두는데 이는 DOM 요소를 생성하는 공정으로 웹킷과 비교하여 의미있는 차이점이라고 보지는 않습니다. 파싱과 DOM 트리 구축파싱 일반파싱은 렌더링 엔진에서 매우 중요한 과정입니다. 문서 파싱은 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것을 의미합니다. 파싱 결과는 보통 문서 구조를 나타내는 노드 트리인데 파싱 트리(parse tree)또는 문법 트리(syntax tree)라고 부릅니다. 예를 들면 2+3-1과 같은 표현식은 다음과 같은 트리가 됩니다. Figure : mathematical expression tree node문법파싱은 문서에 작성된 언어 또는 형식의 규칙에 따르는데 파싱할 수 있는 모든 형식은 정해진 용어와 구문 규칙에 따라야 합니다. 이것을 문맥 자유 문법이라고 합니다. 인간의 언어는 이런 모습과는 다르기 때문에 기계적으로 파싱이 불가능합니다. 파서-어휘 분석기 조합파싱은 어휘 분석과 구문 분석이라는 두 가지로 구분할 수 있습니다. 어휘 분석은 자료를 토큰으로 분해하는 과정입니다. 토큰은 유효하게 구성된 단위의 집합체로 용어집이라고도 할 수 있는데 인간의 언어로 말하자면 사전에 등장하는 모든 단어에 해당됩니다. 구문 분석은 언어의 구문 규칙을 적용하는 과정입니다. 파서는 보통 두 가지 일을 하는데 자료를 유효한 토큰으로 분해하는 어휘 분석기(토큰 변환기 라고도 부름)가 있고 언어 구문 규칙에 따라 문서 구조를 분석함으로써 파싱 트리를 생성하는 파서가 있습니다. 어휘 분석기는 공백과 줄 바꿈 같은 의미 없는 문자를 제거합니다. Figure : from source document to parse trees파싱 과정은 반복됩니다. 파서는 보통 어휘 분석기로부터 새 토큰을 받아서 구문 규칙과 일치하는지 확인합니다. 규칙에 맞으면 토큰에 해당하는 노드가 파싱 트리에 추가되고 파서는 또 다른 토큰을 요청합니다. 규칙에 맞지 않으면 파서는 토큰을 내부적으로 저장하고 토큰과 일치하는 규칙이 발견될 때까지 요청합니다. 맞는 규칙이 없는 경우 예외로 처리하는데 이것은 문서가 유효하지 않고 구문 오류를 포함하고 있다는 의미입니다. 변환파서 트리는 최종 결과물이 아닙니다. 파싱은 보통 문서를 다른 양식으로 변환하는데 컴파일이 하나의 예가 됩니다. 소스 코드를 기계 코드로 만드는 컴파일러는 파싱 트리 생성 후 이를 기계 코드 문서로 변환합니다. Figure : compilation flow파싱 예간단한 수학 언어를 정의하고 파싱과정을 살펴 보자. 어휘: 수학 언어는 정수, 더하기 기호, 빼기 기호를 포함합니다. 구문: 언어 구문의 기본적인 요소는 표현식, 항, 연산자입니다. 언어에 포함되는 표현식의 수는 제한이 없습니다. 표현식은 “항” 뒤에 “연산자” 그 뒤에 또 다른 항이 따르는 형태로 정의합니다. 연산자는 더하기 토큰 또는 빼기 토큰입니다. 정수 토큰 또는 하나의 표현식은 항입니다. 입력된 값 2+3-1을 분석해 봅시다. 규칙에 맞는 첫 번째 부분 문자열은 2입니다. 규칙 5번에 따르면 이것은 하나의 항입니다. 두 번째로 맞는 것은 2+3 인데 이것은 항 뒤에 연산자와 또 다른 항이 등장한다는 세 번째 규칙과도 일치합니다. 입력 값의 마지막 부분까지 진행하면 또 다른 일치를 발견할 수 있습니다. 2+3은 항과 연산자의 항으로 구성된 하나의 새로운 항이라는 것을 알고 있기 때문에 2+3-1은 하나의 표현식이 됩니다. 2++은 어떤 규칙과도 맞지 않기 때문에 유효하지 않은 입력이 됩니다. 어휘와 구문에 대한 공식적인 정의어휘는 보통 정규 표현식으로 표현됩니다. 예를 들면 언어는 다음과 같이 정의될 것입니다. 123INTEGER : 0 | [1-0] [0-9] *PLUS : +MINUS: - 보시다시피 정수는 정규 표현식으로 정의됩니다. 구문은 보통 BNF라고 부르는 형식에 따라 정의합니다. 언어는 다음과 같이 정의될 것입니다. 123expression := term operation termoperation := PLUS | MINUSterm := INTEGER | expression 문법이 문맥 자유 문법이라면 언어는 정규 파서로 파싱할 수 있습니다. 문맥 자유 문법을 쉽게 말하면 완전히 BNF로 표현 가능한 문법입니다. 파서의 종류파서는 기본적으로 하향식 파서와 상향식 파서가 있습니다. 하향식 파서는 구문의 상위 구조로부터 일치하는 부분을 찾기 시작하는데 반해 상향식 파서는 낮은 수준에서 점차 높은 수준으로 찾습니다. 하향식 파서는 2+3과 같은 표현식에 해당하는 높은 수준의 규칙을 먼저 찾습니다. 그 다음 표현식으로 2+3-1을 찾을 것입니다. 표현식을 찾는 과정은 일치하는 다른 규칙을 점진적으로 더 찾아내는 방식인데 어쨌거나 가장 높은 수준의 규칙을 먼저 찾는 것으로부터 시작합니다. 상향식 파서는 입력 값이 규칙에 맞을 때까지 찾아서 맞는 입력 값을 규칙으로 바꾸는데 이 과정은 입력 값의 끝까지 진행됩니다. 부분적으로 일치하는 표현식은 파서 스택에 쌓입니다. 스택 입력 값 2+3-1 항 +3-1 항 연산자 3-1 표현식 -1 표현식 연산자 1 표현식 상향식 파서는 입력 값의 오른쪽으로 이동하면서 구문 규칙으로 갈수록 남는 것이 점차 감소하기 때문에 이동-감소 파서라고 부릅니다. 파서 자동 생성파서를 생성해 줄 수 있는 도구를 파서 생성기라고 합니다. 언어에 어휘나 구문 규칙 같은 문법을 부여하면 동작하는 파서를 만들어 줍니다. 파서를 생성하는 것은 파싱에 대한 깊은 이해를 필요로 하고 수동으로 파서를 최적화하여 생성하는 것은 쉬운 일이 아니기 때문에 파서 생성기는 매우 유용합니다. 웹킷은 잘 알려진 두 개의 파서 생성기를 사용합니다. 어휘 생성을 위한 플렉스(Flex)와 파서 생성을 위한 바이슨(Bison)이다. 렉스(Lex)와 약(Yacc)이라는 이름과 함께 들어본 적이 있을겁니다. 플렉스는 토큰의 정규 표현식 정의를 포함하는 파일을 입력 받고 바이슨은 BNF 형식의 언어 구문 규칙을 입력 받습니다. HTML 파서HTML 파서는 HTML 마크업을 파싱 트리로 변환합니다. HTML 문법 정의HTML의 어휘와 문법은 W3C에 의해 명세로 정의되어 있습니다. 문맥 자유 문법이 아님파싱 일반 소개를 통해 알게 된 것처럼 문법은 BNF와 같은 형식을 이용하여 공식적으로 정의할 수 있습니다. 안타깝게도 모든 전통적인 파서는 HTML에 적용할 수 없습니다. 그럼에도 불구하여 지금까지 파싱을 설명한 것은 그냥 재미 때문은 아닙니다. 파싱은 CSS와 자바스크립트를 파싱하는데 사용됩니다. HTML은 파서가 요구하는 문맥 자유 문법에 의해 쉽게 정의할 수 없습니다. HTML 정의를 위한 공식적인 형식으로 DTD(문서 형식 정의)가 있지만 이것은 문맥 자유 문법이 아닙니다. 이것은 언뜻 이상하게 보일 수도 있는데 HTML이 XML과 유사하기 때문입니다. 사용할 수 있는 XML 파서는 많습니다. HTML을 XML 형태로 재구성한 XHTML도 있는데 무엇이 큰 차이점일까요? 차이점은 HTML이 더 “너그럽다”는 점입니다. HTML은 암묵적으로 태그에 대한 생략이 가능합니다. 가끔 시작 또는 종료 태그 등을 생략합니다. 전반적으로 뻣뻣하고 부담스러운 XML에 반하여 HTML은 “유연한” 문법입니다. 이런 작은 차이가 큰 차이를 만들어 냅니다. 웹 제작자의 실수를 너그럽게 용서하고 편하게 만들어주는 이것이야 말로 HTML이 인기가 있었던 이유입니다. 다른 한편으로는 공식적인 문법으로 작성하기 어렵게 만드는 문제가 있습니다. 정리하자면 HTML은 파싱하기 어렵고 전통적인 구문 분석이 불가능하기 때문에 문맥 자유 문법이 아니라는 것입니다. XML 파서로도 파싱하기 쉽지 않습니다. HTML DTDHTML의 정의는 DTD 형식 안에 있는데 SGML 계열 언어의 정의를 이용한 것입니다. 이 형식은 허용되는 모든 요소와 그들의 속성 그리고 중첩 구조에 대한 정의를 포함합니다. 앞서 말 한대로 HTML DTD는 문맥 자유 문법이 아닙니다. DTD는 여러 변종이 있습니다. 엄격한 형식은 명세만을 따르지만 다른 형식은 낡은 브라우저에서 사용된 마크업을 지원합니다. 낡은 마크업을 지원하는 이유는 오래된 콘텐츠에 대한 하위 호환성 때문입니다. DOM“파싱 트리”는 DOM 요소와 속성 노드의 트리로서 출력 트리가 됩니다. DOM은 문서 객체 모델(Document Object Model)의 준말입니다. 이것은 HTML 문서의 객체 표현이고 외부를 향하는 자바스크립트와 같은 HTML 요소의 연결 지점입니다. 트리의 최상위 객체는 문서입니다. DOM은 마크업과 1:1의 관계를 맺습니다. 예를 들면 이런 마크업이 있습니다. 123456&lt;html&gt; &lt;body&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;div&gt;&lt;img src=\"example.png\" /&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 이것은 아래와 같은 DOM 트리로 변환할 수 있습니다. Figure : DOM tree of the example markupHTML과 마찬가지로 DOM은 W3C에 의해 명세가 정해져 있습니다. 이것은 문서를 다루기 위한 일반적인 명세인데 부분적으로 HTML 요소를 설명하기도 합니다. 트리가 DOM 노드를 포함한다고 말하는 것은 DOM 접점의 하나를 실행하는 요소를 구성한다는 의미입니다. 브라우저는 내부의 다른 속성들을 이용하여 이를 구체적으로 실행합니다. 파싱 알고리즘앞서 말한대로 HTML은 일반적인 하향식 또는 상향식 파서로 파싱이 안되는데 그 이유는 다음과 같습니다. 언어의 너그러운 속성. 잘 알려져 있는 HTML 오류에 대한 브라우저의 관용. 변경에 의한 재파싱. 일반적으로 소스는 파싱하는 동안 변하지 않지만 HTML에서 document.write을 포함하고 있는 스크립트 태그는 토큰을 추가할 수 있기 때문에 실제로는 입력 과정에서 파싱이 수정됩니다. 일반적인 파싱 기술을 사용할 수 없기 때문에 브라우저는 HTML 파싱을 위해 별도의 파서를 생성합니다. 알고리즘은 토큰화와 트리 구축 이렇게 두 단계로 되어 있습니다. 토큰화는 어휘 분석으로서 입력 값을 토큰으로 파싱합니다. HTML에서 토큰은 시작 태그, 종료 태그, 속성 이름과 속성 값입니다. 토큰화는 토큰을 인지해서 트리 생성자로 넘기고 다름 토큰을 확인하기 위해 다음 문자를 확인합니다. 그리고 입력의 마지막까지 이 과정을 반복합니다. Figure : HTML parsing flow토큰화 알고리즘알고리즘의 결과물은 HTML 토큰이다. 알고리즘은 상태 기계(State Machine)라고 볼 수 있습니다. 각 상태는 하나 이상의 연속된 문자를 입력받아 이 문자에 따라 다음 상태를 갱신합니다. 그러나 결과는 현재의 토큰화 상태와 트리 구축 상태의 영향을 받는데, 이것은 같은 문자를 읽어 들여도 현재 상태에 따라 다음 상태의 결과가 다르게 나온다는 것을 의미합니다. 알고리즘은 전체를 설명하기에 너무 복잡하니 원리 이해를 도울만한 간단한 예제를 한번 살펴봅시다. 다음은 HTML 토큰화를 설명하기 위한 기본적인 예제입니다. 12345&lt;html&gt; &lt;body&gt; Hello world &lt;/body&gt;&lt;/html&gt; 초기 상태는 “자료 상태”입니다. &lt; 문자를 만나면 상태는 “태그 열림 상태”로 변한다. a 부터 z까지의 문자를 만나면 “시작 태그 토큰”을 생성하고 상태는 “태그 이름 상태”로 변하는데 이 상태는 &gt; 문자를 만날 때까지 유지합니다. 각 문자에는 새로운 토큰 이름이 붙는데 이 경우 생성된 토큰은 html 토큰입니다. &gt; 문자에 도달하면 현재 토큰이 발행되고 상태는 다시 “자료 상태”로 바뀝니다. 태그는 동일한 절차에 따라 처리됩니다. 지금까지 html 태그와 body 태그를 발행했고 다시 “자료 상태”로 돌아왔습니다. Hello World의 H 문자를 만나면 문자 토큰이 생성되고 발행될 것입니다. 이것은 종료 태그의 &lt; 문자를 만날 때까지 진행됩니다. Hello World의 각 문자를 위한 문자 토큰을 발행할 것입니다. 다시 “태그 열림 상태”가 되었습니다. / 문자는 종료 태그 토큰을 생성하고 “태그 이름 상태”로 변경 될 것입니다. 이 상태는 &gt; 문자를 만날 때까지 유지됩니다. 그리고 새로운 태그 토큰이 발행되고 다시 “자료 상태”가 됩니다. 또한 동일하게 처리될 것입니다. Figure : Tokenizing the example input트리 구축 알고리즘파서가 생성되면 문서 객체가 생성됩니다. 트리 구축이 진행되는 동안 문서 최상단에서는 DOM 트리가 수정되고 요소가 추가됩니다. 토큰화에 의해 발행된 각 노드는 트리 생성자에 의해 처리됩니다. 각 토큰을 위한 DOM 요소의 명세는 정의되어 있습니다. DOM 트리에 요소를 추가하는 것이 아니라면 열린 요소는 스택(임시 버퍼 저장소)에 추가됩니다. 이 스택은 부정확한 중첩과 종료되지 않은 태그를 교정합니다. 알고리즘은 상태 기계라고 설명할 수 있고 상태는 “삽입 모드” 라고 부릅니다. 아래 입력 예제의 트리 생성 과정을 봅시다. 12345&lt;html&gt; &lt;body&gt; Hello world &lt;/body&gt;&lt;/html&gt; 트리 구축 단계의 입력 값은 토큰화 단계에서 만들어지는 일련의 토큰입니다. 받은 html 토큰은 “html 이전” 모드가 되고 토큰은 이 모드에서 처리됩니다. 이것은 HTMLHtmlElement 요소를 생성하고 문서 객체의 최상단에 추가됩니다. 상태는 “head 이전” 모드로 바뀌었고 “body” 토큰을 받았습니다. “head”토큰이 없더라도 HTMLHeadElement는 묵시적으로 생성되어 트리에 추가될 것입니다. 곧이어 “head 안쪽” 모드로 이동했고 다음은 “head 다음” 모드로 갑니다. body 토큰이 처리 되었고 HTMLBodyElement가 생성되어 추가됐으며 “body 안쪽” 모드가 되었습니다. “Hello World” 문자열의 문자 토큰을 받았습니다. 첫 번째 토큰이 생성되고 “본문” 노드가 추가되면서 다른 문자들이 그 노드에 추가될 것입니다. body 종료 토큰을 받으면 “body 다음” 모드가 됩니다. html 종료 태그를 만나면 “body 다음 다음” 모드로 바뀝니다. 마지막 파일 토큰을 받으면 파싱을 종료합니다. Figure : tree construction of example html파싱이 끝난 이후의 동작이번 단계에서 브라우저는 문서와 상호작용할 수 있게 되고 문서 파싱 이후에 실행되어야 하는 “지연” 모드 스크립트를 파싱하기 시작합니다. 문서 상태는 “완료”가 되고 “로드” 이벤트가 발생합니다. 브라우저의 오류 처리HTML 페이지에서 “유효하지 않은 구문” 이라는 오류를 본적이 없을 것입니다. 이는 브라우저가 모든 오류 구문을 교정하기 때문입니다. 아래 오류가 포함된 HTML 예제를 봅시다. 12345678&lt;html&gt; &lt;mytag&gt;&lt;/mytag&gt; &lt;div&gt; &lt;p&gt; &lt;/div&gt; Really lousy HTML &lt;/p&gt;&lt;/html&gt; 일부러 여러 가지 규칙을 위반 했습니다. “mytag”는 표준 태그가 아니고 “p” 태그와 “div” 태그는 중첩 오류가 있습니다. 그러나 브라우저는 올바르게 표시하는데 이는 파서가 HTML 제작자의 실수를 수정했기 때문입니다. 이런 오류 처리 행태는 브라우저에서 꽤나 일반적임에도 불구하고 HTML의 현재 명세가 아니라는 점이 놀라울 뿐입니다. 북마크와 이전/다음 버튼처럼 수 년간 브라우저 안에서 구현된 것입니다. 잘 알려진 HTML 오류를 많은 사이트에서 발견할 수 있지만 브라우저는 다른 브라우저들이 했던 것처럼 관습적으로 오류를 고치고 있습니다. HTML5 명세는 이런 요구 사항 일부를 정의했습니다. 웹킷은 이것을 HTML 파서 클래스의 시작 부분에 주석으로 잘 요약해 두었습니다. 파서는 토큰화된 입력 값을 파싱하여 문서를 만들고 문서 트리를 생성합니다. 규칙에 맞게 잘 작성된 문서라면 파싱이 수월하겠지만 불행하게도 형식에 맞지 않게 작성된 많은 HTML 문서를 다뤄야 하기 때문에 파서는 오류에 대한 아량이 있어야 합니다. 파서는 적어도 다음과 같은 오류를 처리해야 합니다. 어떤 태그의 안쪽에 추가하려는 태그가 금지된 것일 때 일단 허용된 태그를 먼저 닫고 금지된 태그는 외부에 추가합니다. 파서가 직접 요소를 추가해서는 안됩니다. 문서 제작자에 의해 뒤늦게 요소가 추가될 수 있고 생략 가능한 경우도 있습니다. HTML, HEAD, BODY, TBODY, TR, TD, LI 태그가 이런 경우에 해당합니다. 인라인 요소 안쪽에 블록 요소가 있는 경우 부모 블록 요소를 만날 때까지 모든 인라인 태그를 닫습니다. 이런 방법이 도움이 되지 않으면 태그를 추가하거나 무시할 수 있는 상태가 될 때까지 요소를 닫습니다. 웹킷이 오류를 처리하는 예는 다음과 같습니다. &lt;br&gt; 대신 &lt;/br&gt; 어떤 사이트는 &lt;br&gt; 대신 &lt;/br&gt;을 사용합니다. 인터넷 익스플로러, 파이어폭스와 호환성을 갖기 위해 웹킷은 이것을 &lt;br&gt;으로 간주합니다. 코드는 다음과 같습니다. 1234if( t -&gt; isCloseTag (brTag) &amp;&amp; m_document -&gt; inCompatMode () ) { reportError(MalformedBRError); t -&gt; beginTag = true;} 오류는 내부적으로 처리하고 사용자에게는 표시하지 않습니다. 어긋난 표어긋난 표는 표 안에 또 다른 표가 th 또는 td 셀 내부에 있지 않은 것을 의미합니다. 아래 예제와 같은 경우를 말합니다. 123456&lt;table&gt; &lt;table&gt; &lt;tr&gt;&lt;td&gt;inner table&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;tr&gt;&lt;td&gt;outer table&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 이런 경우 웹킷은 표의 중첩을 분해하여 형제 요소가 되도록 처리합니다. 123456&lt;table&gt; &lt;tr&gt;&lt;td&gt;outer table&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table&gt; &lt;tr&gt;&lt;td&gt;inner table&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 코드는 다음과 같습니다. 12if ( m_inStrayTableContent &amp;&amp; localName == tableTag )popBlock(tableTag) ; 웹킷은 이런 오류를 처리하는데 스택을 사용합니다. 안쪽의 표는 바깥쪽 표의 외부로 옮겨져서 형제 요소가 됩니다. 중첩된 폼 요소폼 안에 또 다른 폼을 넣은 경우 안쪽의 폼은 무시됩니다. 코드는 다음과 같습니다. 123if ( !m_currentFormElement) { m_currentFormElement = new HTMLFormElement (formTag, m_document) ;} 태그 중첩이 너무 깊을 때주석에는 이렇게 적혀 있습니다. www.liceo.edu.mx 사이트는 약 1,500개 수준의 태그 중첩이 되어 있는 예제인데 모든 요소가 &lt;b&gt;로 되어 있습니다. 최대 20개의 중첩만 허용하고 나머지는 무시합니다. 1234567bool HTMLParser::allowNestedRedundantTag (const AtomicString &amp;&amp; tagName) { unsigned i = 0; for (HTMLStackElem* curr = m_blockStack; i &lt; cMaxRedundantTagDepth &amp;&amp; curr &amp;&amp; curr -&gt; tagName == tagName; curr = curr -&gt; next, i ++) { } return i != cMaxRedundantTagDepth;} 잘못 닫힌 html 또는 body 태그주석에는 이렇게 적혀 있습니다. 깨진 html을 지원합니다. 일부 바보 같은 페이지는 문서가 끝나기 전에 body를 닫아버리기 때문에 브라우저는 body 태그를 닫지 않습니다. 대신 종료를 위해 end()를 호출합니다. 12if ( t -&gt; tagName == htmlTag || t -&gt; tagName == bodyTag ) return; 웹킷 오류 처리 코드에 예제로 등장하는 것을 원치 않는다면 웹 제작자는 올바른 HTML 작성을 위해 신경 써야 할 것입니다.출처: https://d2.naver.com/helloworld/59361","link":"/2022/09/13/Backend-Roadmap/browsers-and-how-they-work/"},{"title":"DNS and how it works?","text":"DNS는 무엇이고 어떻게 작동할까요? DNS란 무엇인가요?DNS(도메인 이름 시스템)는 인터넷의 전화번호부입니다. 인간은 nytimes.com 이나 espn.com 와 같은 도메인 이름을 통해 온라인으로 정보에 액세스합니다. 웹 브라우저는 IP(인터넷 프로토콜) 주소를 통해 상호 작용합니다. DNS는 브라우저가 인터넷 리소스를 로드할 수 있도록 도메인 이름을 IP 주소로 변환합니다. 인터넷에 연결된 각 장치에는 다른 컴퓨터가 장치를 찾는 데 사용하는 고유한 IP 주소가 있습니다. DNS 서버는 사람이 192.168.1.1(IPV4)과 같은 IP 주소 또는 2400:cb00:2048:1::c629:d7a2(IPv6)와 같은 더 복잡한 최신 영숫자 IP 주소를 암기할 필요가 없습니다. DNS는 어떻게 작동할까요?DNS 확인 프로세스에는 호스트 이름(예: www.example.com)을 컴퓨터 친화적인 IP 주소(예: 192.168.1.1)로 변환하는 작업이 포함됩니다. IP 주소는 인터넷상의 각 장치에 주어지며, 거리 주소가 특정 집을 찾는 데 사용되는 것처럼 해당 주소는 적절한 인터넷 장치를 찾는 데 필요합니다. 사용자가 웹 페이지를 로드하려는 경우 사용자가 웹 브라우저(example.com)에 입력하는 내용과 example.com 웹 페이지를 찾는 데 필요한 기계 친화적인 주소 간에 변환이 이루어져야 합니다. DNS 확인 프로세스를 이해하려면 DNS 쿼리가 전달해야 하는 다양한 하드웨어 구성요소에 대해 알아보는 것이 중요합니다. 웹 브라우저의 경우 DNS 조회는 “백그라운드에서” 발생하며 초기 요청 외에는 사용자의 컴퓨터와의 상호 작용이 필요하지 않습니다. 웹 페이지 로드와 관련된 4개의 DNS 서버가 있습니다. DNS recursor - 리커서는 도서관의 어딘가에 특정 책을 찾으러 가라는 요청을 받는 사서로 생각할 수 있습니다. DNS 리커서는 웹 브라우저와 같은 응용 프로그램을 통해 클라이언트 시스템에서 쿼리를 수신하도록 설계된 서버입니다. 일반적으로 리커서는 클라이언트의 DNS 쿼리를 충족하기 위해 추가 요청을 담당합니다. Root nameserver - 루트 서버는 사람이 읽을 수 있는 호스트 이름을 IP 주소로 변환하는 첫 번째 단계입니다. 그것은 책의 다른 랙을 가리키는 도선관의 색인처럼 생각할 수 있습니다. TLD nameserver - 최상위 도메인 서버는 라이브러리의 특성 서적 랙으로 간주할 수 있습니다. 이 네임서버는 특정 IP 주소를 검색하는 다음 단계이며 호스트 이름의 마지막 부분을 호스팅합니다(example.com 에서 TLD 서버는 “com”임). Authoritative nameserver - 이 최종 서버는 특정 이름을 정의로 번역 할 수 있는 책 랙의 사전으로 생각할 수 있습니다. 신뢰할 수 있는 네임서버는 네임서버 쿼리의 마지막 중지입니다. 권한 있는 이름 서버가 요청된 레코드에 액세스할 수 있는 경우 요청된 호스트 이름의 IP 주소를 초기 요청을 수행한 DNS 리커서(도서관 사서)에게 다시 반환합니다. 신뢰할 수 있는 DNS 서버와 재귀 DNS 확인자(resolver)의 차이점은 무엇인가요?두 개념 모두 DNS 인프라에 필수적인 서버를 의미하지만 각각 다른 역할을 수행하고 DNS 쿼리의 파이프라인 내에서 서로 다른 위치에 있습니다. 차이점에 대해 생각하는 한 가지 방법은 재귀 확인자가 DNS 쿼리의 시작 부분에 있고 신뢰할 수 있는 네임 서버가 끝에 있다는 것입니다. 재귀 DNS 확인자(resolver)재귀 확인자는 클라이언트의 재귀 요청에 응답하고 DNS 레코드를 추적하는데 시간이 걸리는 컴퓨터입니다. 요청된 레코드에 대한 신뢰할 수 있는 DNS 이름 서버에 도달할 때까지 일련의 요청을 수행하여 이 작업을 수행합니다. 다행히도 재귀 DNS 확인자는 클라이언트에 응답하는 데 필요한 레코드를 추적하기 위해 항상 여러 요청을 할 필요는 없습니다. 캐싱은 DNS 조회 초기에 요청된 리소스 레코드를 제공하여 필요한 요청을 단락시키는 데 도움이 되는 데이터 지속성 프로세스입니다. DNS Record Request Sequence신뢰할 수 있는 DNS 서버간단히 말해, 신뢰할 수 있는 DNS 서버는 실제로 DNS 리소스 레코드를 보유하고 이를 담당하는 서버입니다. 이것은 쿼리 된 리소스 레코드로 응답하는 DNS 조회 체인의 맨 아래에 있는 서버로, 궁극적으로 웹 브라우저가 웹 사이트 또는 기타 웹 리소스에 액세스하는 데 필요한 IP 주소에 도달하도록 요청할 수 있습니다. 신뢰할 수 있는 네임서버는 특정 DNS 레코드에 대한 진실의 최종 원본이므로 다른 원본을 쿼리할 필요 없이 자체 데이터에서 쿼리를 충족할 수 있습니다. DNS Record Request SequenceDNS 조회의 단계는 무엇인가요?대부분의 경우 DNS는 도메인 이름이 적절한 IP 주소로 변환되는 것과 관련이 있습니다. 이 프로세스의 작동 방식을 알아보려면 웹 브라우저에서 DNS 조회 프로세스를 거쳐 다시 이동할 때 DNS 조회의 경로를 따르는 것이 도움이 됩니다. DNS 조회의 8 단계 사용자가 웹 브라우저에 ‘example.com’을 입력하면 쿼리가 인터넷으로 이동하여 DNS 재귀 확인자가 수신합니다. 그런 다음 확인자는 DNS 루트 네임서버(.)를 쿼리합니다. 그런 다음 루트 서버는 해당 도메인에 대한 정보를 저장하는 TLD DNS 서버(예: .com 또는 .net)의 주소로 확인자에게 응답합니다. example.com을 검색할 때 우리의 요청은 .com TLD를 가리킵니다. 그런 다음 확인자는는 .com TLD에 요청합니다 TLD 서버는 도메인의 네임서버 example.com의 IP 주소로 응답합니다. 마지막으로 재귀 확인자는 도메인의 네임 서버에 쿼리를 보냅니다. example.com의 IP 주소가 네임서버에서 확인자로 리턴합니다. 그런 다음 DNS 확인자는 처음에 요청된 도메인의 IP 주소로 웹 브라우저에 응답합니다. DNS 조회의 8 단계가 example.com의 IP 주소를 반환하면 브라우저는 웹 페이지에 다음 요청을 할 수 있습니다.9. 브라우저는 IP 주소에 HTTP 요청을 합니다.10. 해당 IP의 서버는 브라우저에서 렌더링될 웹페이지를 리턴합니다. Complete DNS Lookup and Webpage QueryDNS 확인자란 무엇인가요?DNS 확인자는 DNS 조회의 첫 번째 중지이며 초기 요청을 수행한 클라이언트를 처리하는 역할을 합니다. 확인자는 궁극적으로 URL이 필요한 IP 주소로 변환되는 쿼리 시퀀스를 시작합니다. 재귀 DNS 쿼리와 재귀 DNS 확인자를 구분하는 것이 중요합니다. 쿼리는 쿼리 확인을 요구하는 DNS 확인자에 대한 요청을 나타냅니다. DNS 재귀 확인자는 재귀 쿼리를 수락하고 필요한 요청을 수행하여 응답을 처리하는 컴퓨터입니다. DNS recursive and DNS queryDNS 쿼리의 유형은 무엇인가요?일반적인 DNS 조회에서는 세 가지 유형의 쿼리가 발생합니다. 이러한 쿼리의 조합을 사용하면 DNS 확인에 최적화된 프로세스로 이동 거리가 줄어들 수 있습니다. 이상적인 상황에서는 캐시된 레코드 데이터를 사용할 수 있으므로 DNS 이름 서버가 비재귀적 쿼리를 반환할 수 있습니다. 3가지 유형의 DNS 쿼리 재귀 쿼리 - 재귀 쿼리에서 DNS 클라이언트는 DNS 서버(일반적으로 DNS 재귀 확인자)가 요청된 리소스 레코드 또는 확인자가 레코드를 찾을 수 없는 경우 오류 메시지로 클라이언트에 응답하도록 요구합니다. 반복 쿼리 - 이 상황에서 DNS 클라이언트는 DNS 서버가 가능한 최상의 답변을 반환하도록 허용합니다. 쿼리된 DNS 서버가 쿼리 이름과 일치하지 않으면 도메인 네임스페이스의 하위 수준에 대해 권한이 있는 DNS 서버에 대한 조회를 반환합니다. 그런 다음 DNS 클라이언트는 조회 주소에 대한 쿼리를 수행합니다. 이 프로세스는 오류 또는 시간 초과가 발생할 때까지 쿼리 체인 다운의 추가 DNS 서버와 함께 계속됩니다. 비재귀 쿼리 - 일반적으로 DNS 확인자 클라이언트가 DNS 서버에 레코드에 대한 권한이 있거나 레코드가 캐시 내에 존재하기 때문에 액세스할 수 있는 레코드를 쿼리할 때 이 문제가 발생합니다. 일반적으로 DNS 서버는 추가 대역폭 소비를 방지하고 업스트림 서버에 로드하기 위해 DNS 레코드를 캐시합니다. DNS 캐싱이란 무엇인가요? DNS 캐싱은 어디에서 발생할까요?캐싱의 목적은 데이터 요청에 대한 성능과 안정성을 향상시키는 위치에 데이터를 임시로 저장하는 것입니다. DNS 캐싱에는 데이터를 요청하는 클라이언트에 더 가깝게 저장하여 DNS 쿼리를 더 일찍 해결하고 DNS 조회 체인의 추가 쿼리를 피할 수 있으므로 로드 시간을 개선하고 대역폭/CPU 사용량을 줄일 수 있습니다. DNS 데이터는 다양한 위치에 캐시될 수 있으며, 각 위치는 TTL(Time-to-Live)에 의해 결정된 설정된 시간 동안 DNS 레코드를 저장합니다. 브라우저 DNS 캐싱최신 웹 브라우저는 기본적으로 설정된 시간 동안 DNS 레코드를 캐시하도록 설계되었습니다. 여기서 목적은 분명합니다. DNS 캐싱이 웹 브라우저에 가까울수록 캐시를 확인하고 IP 주소에 대한 올바른 요청을 수행하기 위해 더 적은 처리 단계를 수행해야합니다. DNS 레코드에 대한 요청이 이루어지면 브라우저 캐시는 요청된 레코드에 대해 확인된 첫 번째 위치입니다. Chrome에서는 chrome://net-internals/#dns 로 이동하여 DNS 캐시의 상태를 확인할 수 있습니다. 운영 체제(OS) 수준 DNS 캐싱운영 체제 수준 DNS 확인자는 DNS 쿼리가 컴퓨터를 떠나기 전에 두 번째이자 마지막 로컬 중지입니다. 이 쿼리를 처리하도록 설계된 운영 체제 내부의 프로세스를 일반적으로 “스텁 확인자” 또는 DNS 클라이언트라고 합니다. 스텁 해석기가 응용 프로그램에서 요청을 받으면 먼저 자체 캐시를 검사하여 레코드가 있는지 확인합니다. 그렇지 않은 경우 로컬 네트워크 외부의 DNS 쿼리(재귀 플래그가 설정된 상태)를 ISP(인터넷 서비스 공급자) 내부의 DNS 재귀 확인자로 보냅니다. ISP 내부의 재귀 확인자가 이전 모든 단계와 마찬가지로 DNS 쿼리를 수신하면 요청된 호스트-IP 주소 변환이 이미 로컬 지속성 계층 내에 저장되어 있는지 확인합니다. 재귀 해석기에는 캐시에 있는 레코드 유형에 따라 추가 기능도 있습니다. 확인자에 A 레코드가 없지만 신뢰할 수 있는 네임서버에 대한 NS 레코드가 있는 경우 DNS 쿼리의 여러 단계를 우회하여 해당 이름 서버를 직접 쿼리합니다. 이 바로 가기는 루트 및 .com 이름 서버(example.com 검색)에서 조회를 방지하고 DNS 쿼리의 확인이 더 빠르게 수행되도록 도와줍니다. 확인자에게 NS 레코드가 없는 경우 TLD 서버(이 경우 .com)에 쿼리를 보내 루트 서버를 건너뜁니다. 드물게 해석기가 TLD 서버를 가리키는 레코드를 가지고 있지 않은 경우 루트 서버를 쿼리합니다. 이 이벤트는 일반적으로 DNS 캐시가 제거된 후에 발생합니다.출처: https://www.cloudflare.com/learning/dns/what-is-dns/","link":"/2022/09/14/Backend-Roadmap/DNS-and-how-it-works/"},{"title":"What is a Domain Name?","text":"도메인 네임은 무엇인가요? 도메인 네임이란 무엇인가요?도메인 네임은 클라이언트 소프트웨어에서 웹 사이트에 액세스하는 데 사용되는 숫자 IP 주소에 매핑되는 텍스트 문자열입니다. 일반 영어에서 도메인 이름은 사용자가 특정 웹 사이트에 도달하기 위해 브라우저 창에 입력하는 텍스트입니다. 예를 들어 Google의 도메인 이름은 ‘google.com’입니다. 웹 사이트의 실제 주소는 복잡한 숫자 IP 주소 (예: 103.21.244.0)이지만 DNS 덕분에 사용자는 인간 친화적 인 도메인 이름을 입력하고 찾고있는 웹 사이트로 라우팅 될 수 있습니다. 이 프로세스를 DNS 조회라고 합니다. 도메인 네임은 누가 관리하나요?도메인 이름은 모두 도메인 등록 기관에 의해 관리되며, 도메인 이름 예약을 등록 기관에 위임합니다. 웹 사이트를 만들려는 사람은 누구나 등록 기관에 도메인 이름을 할 수 있으며 현재 3 억 개가 넘는 등록 된 도메인 이름이 있습니다. 도메인 네임과 URL의 차이점은 무엇인가요?웹 주소라고도 하는 균일 리소스 로케이터(URL)에는 사이트의 도메인 이름뿐만 아니라 전송 프로토콜 및 경로를 비롯한 기타 정보가 포함됩니다. 예를 들어 URL ‘https://cloudflare.com/learning/'에서 ‘cloudflare.com’는 도메인 이름이고 ‘https’는 프로토콜이고 ‘/learning/‘은 웹 사이트의 특정 페이지에 대한 경로입니다. 도메인 네임의 각 부분은 무엇을 나타내나요?도메인 이름은 일반적으로 두 개 또는 세 부분으로 나뉘며, 각 부분은 점으로 구분됩니다. 오른쪽에서 왼쪽으로 읽을 때 도메인 이름의 식별자는 가장 일반적인 식별자에서 가장 구체적인 식별자로 이동합니다. 도메인 이름의 마지막 점 오른쪽에 있는 섹션은 최상위 도메인(TLD)입니다. 여기에는 ‘.com’, ‘.net’ 및 ‘.org’와 같은 ‘일반’TLD와 ‘.uk’ 및 ‘.jp’와 같은 국가별 TLD가 포함됩니다. TLD의 왼쪽에는 두 번째 레벨 도메인 (2LD)이 있고 2LD의 왼쪽에 또 존재하면 3LD라고합니다. 몇 가지 예를 살펴 보겠습니다. Google의 미국 도메인 이름의 경우 ‘google.com’: ‘.com’는 TLD 입니다. ‘google’은 2LD 입니다. 만약 Google UK의 도메인 이름의 경우 ‘google.co.uk’: ‘.com’는 TLD 입니다. ‘.co’는 2LD 입니다. ‘google’은 3LD 입니다. 도메인 네임을 안전하게 유지하는 방법도메인 이름이 등록 기관에 등록되면 해당 등록 기관은 도메인이 곧 만료 될 때 등록자에게 알리고 갱신 할 수있는 기회를 제공하여 도메인 이름을 잃지 않도록합니다. 경우에 따라 등록 기관은 만료되는 두 번째 도메인을 구입 한 다음 엄청난 가격으로 원래 등록자에게 다시 판매하여 사용자의 만료 된 도메인 네임을 먹이로 삼을 것입니다. 이러한 종류의 약탈 관행을 피하기 위해 정직하고 신뢰할 수 있는 등록 기관을 선택하는 것이 중요합니다. 출처: https://www.cloudflare.com/en-gb/learning/dns/glossary/what-is-a-domain-name/","link":"/2022/09/15/Backend-Roadmap/what-is-a-domain-name/"},{"title":"What is hosting?","text":"호스팅은 무엇인가요? 호스팅이란 무엇인가요?호스팅이란 서버 컴퓨터의 전체 또는 일정 공간을 이용할 수 있도록 임대해 주는 서비스를 말합니다. 사용자가 직접 서버를 구입하고 운영할 필요없이 호스팅 업체가 미리 준비해 놓은 서버를 빌려 사용하는 형식입니다. 호스팅 서비스에는 웹 호스팅과 서버 호스팅, 메일 호스팅 등 다양한 종류가 있습니다. 웹 호스팅웹 호스팅 혹은 공유 호스팅은 개별 홈페이지를 운영하는 사용자를 위해 서버 컴퓨터의 일부 공간을 임대해 주는 서비스입니다. 메일 호스팅메일 호스팅은 이메일 혹은 웹메일 계정과 공간을 임대해 주는 서비스입니다. 사용자가 도메인을 직접 구매하고 연결하여 이메일을 만드는 식으로 제공됩니다. 서버 호스팅서버 호스팅은 서버 컴퓨터의 부분, 혹은 전체를 임대하는 서비스입니다. 1. 가상 서버 호스팅(Virtual Private Server, VPS)가상 서버 호스팅은 서버의 일정한 공간을 가상화 기술을 이용하여 한대의 서버처럼 나눠 주는 기술입니다. 2. 가상 전용 서버 호스팅(Virtual Dedicated Server, VDS)3. 전용 서버 호스팅(Dedicated Server Hosting)주의할점오버 셀링","link":"/2022/09/21/Backend-Roadmap/what-is-hosting/"},{"title":"NULL 포인터 'value'를 역참조하고 있습니다. [C Language]","text":"경고 C6011: NULL 포인터 &lt;이름 역참조&gt; H-&gt;head 참고:https://learn.microsoft.com/en-us/cpp/code-quality/c6011?view=msvc-170https://m.blog.naver.com/tipsware/221712079963","link":"/2022/09/29/ProgrammingLanguage/C/post/"}],"tags":[{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"Backend, Roadmap","slug":"Backend-Roadmap","link":"/tags/Backend-Roadmap/"},{"name":"Backend-Roadmap, HTTP","slug":"Backend-Roadmap-HTTP","link":"/tags/Backend-Roadmap-HTTP/"},{"name":"Backend-Roadmap","slug":"Backend-Roadmap","link":"/tags/Backend-Roadmap/"},{"name":"Backend-Roadmap, DNS","slug":"Backend-Roadmap-DNS","link":"/tags/Backend-Roadmap-DNS/"},{"name":"Backend-Roadmap, Internet","slug":"Backend-Roadmap-Internet","link":"/tags/Backend-Roadmap-Internet/"}],"categories":[{"name":"Documentation","slug":"Documentation","link":"/categories/Documentation/"}]}